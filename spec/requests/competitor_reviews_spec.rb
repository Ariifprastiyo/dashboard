require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/competitor_reviews", type: :request do
  let!(:organization) { create(:organization) }
  let!(:admin) { create(:admin, organization: organization) }
  let!(:brand) { create(:brand, organization: organization) }
  let!(:campaign) { create(:campaign, organization: organization, brand: brand) }
  let!(:other_campaign) { create(:campaign, organization: organization, brand: brand) }
  let!(:super_admin) { create(:super_admin) }

  # This should return the minimal set of attributes required to create a valid
  # CompetitorReview. As you add validations to CompetitorReview, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: "Test Competitor Review",
      organization_id: organization.id,
      campaign_ids: [campaign.id]
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      organization_id: nil,
      campaign_ids: []
    }
  }

  before do
    sign_in super_admin
  end

  describe "GET /index" do
    it "renders a successful response" do
      CompetitorReview.create! valid_attributes
      get competitor_reviews_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_competitor_review_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      competitor_review = CompetitorReview.create! valid_attributes
      get edit_competitor_review_url(competitor_review)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new CompetitorReview" do
        expect {
          post competitor_reviews_url, params: { competitor_review: valid_attributes }
        }.to change(CompetitorReview, :count).by(1)
      end

      it "redirects to the created competitor_review" do
        post competitor_reviews_url, params: { competitor_review: valid_attributes }
        expect(response).to redirect_to(competitor_review_url(CompetitorReview.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new CompetitorReview" do
        expect {
          post competitor_reviews_url, params: { competitor_review: invalid_attributes }
        }.to change(CompetitorReview, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post competitor_reviews_url, params: { competitor_review: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          title: "Updated Competitor Review",
          organization_id: organization.id,
          campaign_ids: [other_campaign.id]
        }
      }

      it "updates the requested competitor_review" do
        competitor_review = CompetitorReview.create! valid_attributes
        patch competitor_review_url(competitor_review), params: { competitor_review: new_attributes }
        competitor_review.reload
        expect(competitor_review.title).to eq("Updated Competitor Review")
        expect(competitor_review.campaign_ids).to eq([other_campaign.id])
        expect(competitor_review.organization_id).to eq(organization.id)
      end

      it "redirects to the competitor_review" do
        competitor_review = CompetitorReview.create! valid_attributes
        patch competitor_review_url(competitor_review), params: { competitor_review: new_attributes }
        competitor_review.reload
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        competitor_review = CompetitorReview.create! valid_attributes
        patch competitor_review_url(competitor_review), params: { competitor_review: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested competitor_review" do
      competitor_review = CompetitorReview.create! valid_attributes
      expect {
        delete competitor_review_url(competitor_review)
      }.to change(CompetitorReview, :count).by(-1)
    end

    it "redirects to the competitor_reviews list" do
      competitor_review = CompetitorReview.create! valid_attributes
      delete competitor_review_url(competitor_review)
      expect(response).to redirect_to(competitor_reviews_url)
    end
  end
end
